use std::str::FromStr;

use super::ast::*;

grammar;

match {
  // Symbols
  "=",
  ":-",
  ":=",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ":",
  ",",
  "|",
  ".",
  "<:",
  "::",
  "$",
  "->",
  "@",
  "..",
  "..=",

  // Formula Operators
  "/\\", // /\
  "\\/", // \/
  "~",
  "=>",
  "∃",
  "∀",

  // Expression Operators
  "&&",
  "||",
  "^",
  "==",
  "!=",
  "<",
  ">",
  ">=",
  "<=",
  "+",
  "-",
  "*",
  "/",
  "%",
  "!",
  "as",
  "?",

  // Operators Keyword
  "bound",
  "free",
  "and",
  "or",
  "not",
  "implies",
  "where",
  "if",
  "then",
  "else",
  "exists",
  "forall",
  "in",
  "case",
  "is",
  "new",

  // Type
  "i8",
  "i16",
  "i32",
  "i64",
  "i128",
  "isize",
  "u8",
  "u16",
  "u32",
  "u64",
  "u128",
  "usize",
  "f32",
  "f64",
  "char",
  "bool",
  "&str",
  "String",
  "Symbol",
  "DateTime",
  "Duration",
  "Entity",
  "Tensor",

  // Boolean keywords
  "true",
  "false",

  // Wildcard
  "_",

  // Keywords
  "import",
  "extern",
  "type",
  "const",
  "relation",
  "rel",
  "query",

  // Literals
  r"[a-zA-Z][a-zA-Z_0-9]*" => name,
  r"([a-zA-Z][a-zA-Z_0-9]*)\s*<\s*([a-zA-Z][a-zA-Z_0-9]*)(\s*,\s*([a-zA-Z][a-zA-Z_0-9]*))*\s*>" => specialized_name,
  r"-?[0-9]+" => int,
  r"-?[0-9]+(\.[0-9]+)(e-?[0-9]+)?" => float,
  r#""((?:[^"\\]|\\.)*)""# => single_quote_string,
  r#""""(?:[^"\\]|\\.|"[^"]|""[^"])*""""# => triple_quote_string,
  r#"s"[^"]*""# => symbol_string,
  r#"t"[^"]*""# => date_time_string,
  r#"d"[^"]*""# => duration_string,
  r#"'[^']*'"# => character,

  // Comments and Whitespaces
  r"[ \n\r]*" => { },
  r"//[^\n\r]*[\n\r]*" => { },
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },
}

/// ============================== ///
/// ========= Attributes ========= ///
/// ============================== ///

AttributeValueTuple = Spanned<_AttributeValueTuple>;
_AttributeValueTuple: _AttributeValueTuple = {
  "(" <vs: Separated<AttributeValue, ",">> ")" => _AttributeValueTuple::new(vs),
}

AttributeValueList = Spanned<_AttributeValueList>;
_AttributeValueList: _AttributeValueList = {
  "[" <vs: Separated<AttributeValue, ",">> "]" => _AttributeValueList::new(vs),
}

AttributeValue: AttributeValue = {
  Constant => AttributeValue::Constant(<>),
  AttributeValueTuple => AttributeValue::Tuple(<>),
  AttributeValueList => AttributeValue::List(<>),
}

AttributeKwArg = Spanned<_AttributeKwArg>;
_AttributeKwArg: _AttributeKwArg = {
  <i: Identifier> "=" <c: AttributeValue> => _AttributeKwArg::new(i, c),
}

AttributeArg: AttributeArg = {
  AttributeValue => AttributeArg::Pos(<>),
  AttributeKwArg => AttributeArg::Kw(<>),
}

Attribute = Spanned<_Attribute>;
_Attribute: _Attribute = {
  "@" <name: Identifier> => _Attribute::new(name, vec![]),
  "@" <name: Identifier> "(" <args: Separated<AttributeArg, ",">> ")" => _Attribute::new(name, args),
}

Attributes = Attribute*;

/// ==================================== ///
/// ========= Type Declaration ========= ///
/// ==================================== ///

Type = Spanned<_Type>;
_Type: _Type = {
  "i8" => _Type::I8,
  "i16" => _Type::I16,
  "i32" => _Type::I32,
  "i64" => _Type::I64,
  "i128" => _Type::I128,
  "isize" => _Type::ISize,
  "u8" => _Type::U8,
  "u16" => _Type::U16,
  "u32" => _Type::U32,
  "u64" => _Type::U64,
  "u128" => _Type::U128,
  "usize" => _Type::USize,
  "f32" => _Type::F32,
  "f64" => _Type::F64,
  "char" => _Type::Char,
  "bool" => _Type::Bool,
  "&str" => _Type::Str,
  "String" => _Type::String,
  "Symbol" => _Type::Symbol,
  "DateTime" => _Type::DateTime,
  "Duration" => _Type::Duration,
  "Entity" => _Type::Entity,
  "Tensor" => _Type::Tensor,
  <n: Name> => _Type::Named(n),
}

SubtypeDecl = Spanned<_SubtypeDecl>;
_SubtypeDecl: _SubtypeDecl = {
  <attrs: Attributes> "type" <n: Identifier> "<:" <t: Type> => {
    _SubtypeDecl::new(attrs, n, t)
  }
}

AliasTypeDecl = Spanned<_AliasTypeDecl>;
_AliasTypeDecl: _AliasTypeDecl = {
  <attrs: Attributes> "type" <n: Identifier> "=" <t: Type> => {
    _AliasTypeDecl::new(attrs, n, t)
  }
}

ArgTypeBindingAdornment = Spanned<_ArgTypeBindingAdornment>;
_ArgTypeBindingAdornment: _ArgTypeBindingAdornment = {
  "bound" => _ArgTypeBindingAdornment::Bound,
  "free" => _ArgTypeBindingAdornment::Free,
}

ArgTypeBinding = Spanned<_ArgTypeBinding>;
_ArgTypeBinding: _ArgTypeBinding = {
  <adornment: ArgTypeBindingAdornment?> <n: Identifier> ":" <t: Type> => {
    _ArgTypeBinding::new(adornment, Some(n), t)
  },
  <adornment: ArgTypeBindingAdornment?> <t: Type> => {
    _ArgTypeBinding::new(adornment, None, t)
  }
}

pub RelationType = Spanned<_RelationType>;
_RelationType: _RelationType = {
  <n: Identifier> "(" <ts: Separated<ArgTypeBinding, ",">> ")" => {
    _RelationType::new(n, ts)
  },
}

ExternKeyword = Spanned<_ExternKeyword>;
_ExternKeyword: _Extern = "extern" => _Extern;

RelationTypeDecl = Spanned<_RelationTypeDecl>;
_RelationTypeDecl: _RelationTypeDecl = {
  <attrs: Attributes> <ext: ExternKeyword?> "type" <rts: AtLeastOneSeparated<RelationType, ",">> => {
    _RelationTypeDecl::new(attrs, ext, rts)
  },
}

EnumTypeDecl = Spanned<_EnumTypeDecl>;
_EnumTypeDecl: _EnumTypeDecl = {
  <attrs: Attributes> "type" <n: Identifier> "=" <ms: AtLeastTwoSeparatedStrict<EnumTypeMember, "|">> => {
    _EnumTypeDecl::new(attrs, n, ms)
  }
}

EnumTypeMember = Spanned<_EnumTypeMember>;
_EnumTypeMember: _EnumTypeMember = {
  <n: Identifier> => _EnumTypeMember::new(n, None),
  <n: Identifier> "=" <c: Constant> => _EnumTypeMember::new(n, Some(c)),
}

ADTSeparator = "|";

AlgebraicDataTypeDecl = Spanned<_AlgebraicDataTypeDecl>;
_AlgebraicDataTypeDecl: _AlgebraicDataTypeDecl = {
  <attrs: Attributes> "type" <name: Identifier> "=" ADTSeparator? <vs: AtLeastTwoSeparatedStrict<AlgebraicDataTypeVariant, ADTSeparator>> => {
    _AlgebraicDataTypeDecl::new(attrs, name, vs)
  }
}

AlgebraicDataTypeVariant = Spanned<_AlgebraicDataTypeVariant>;
_AlgebraicDataTypeVariant: _AlgebraicDataTypeVariant = {
  <constructor: Identifier> "(" <args: Separated<Type, ",">> ")" => {
    _AlgebraicDataTypeVariant::new(constructor, args)
  }
}

FunctionTypeDecl = Spanned<_FunctionTypeDecl>;
_FunctionTypeDecl: _FunctionTypeDecl = {
  <attrs: Attributes> "type" "$" <n: Identifier> "(" <args: Separated<ArgTypeBinding, ",">> ")" "->" <ret_ty: Type> => {
    _FunctionTypeDecl::new(attrs, n, args, ret_ty)
  }
}

TypeDecl: TypeDecl = {
  SubtypeDecl => TypeDecl::Subtype(<>),
  AliasTypeDecl => TypeDecl::Alias(<>),
  RelationTypeDecl => TypeDecl::Relation(<>),
  EnumTypeDecl => TypeDecl::Enumerate(<>),
  AlgebraicDataTypeDecl => TypeDecl::Algebraic(<>),
  FunctionTypeDecl => TypeDecl::Function(<>),
}

/// ======================================== ///
/// ========= Constant Declaration ========= ///
/// ======================================== ///

pub Entity: Entity = {
  Expr => Entity::Expr(<>),
  Object => Entity::Object(<>),
}

Object = Spanned<_Object>;
_Object: _Object = {
  <functor: Identifier> "(" <args: Separated<Entity, ",">> ")" => {
    _Object::new(functor, args)
  }
}

ConstAssignment = Spanned<_ConstAssignment>;
_ConstAssignment: _ConstAssignment = {
  <n: Identifier> ":" <t: Type> "=" <e: Entity> => _ConstAssignment::new(n, Some(t), e),
  <n: Identifier> "=" <e: Entity> => _ConstAssignment::new(n, None, e),
}

ConstDecl = Spanned<_ConstDecl>;
_ConstDecl: _ConstDecl = {
  <attrs: Attributes> "const" <assignments: AtLeastOneSeparatedStrict<ConstAssignment, ",">> => {
    _ConstDecl::new(attrs, assignments)
  }
}

/// ======================= ///
/// ========= Tag ========= ///
/// ======================= ///

Tag: Expr = ExprTagTop;

ExprTagTop: Expr = {
  AndOrExprTag,
}

_AndOrBinaryExprTag: _BinaryExpr = {
  <op1: AndOrExprTag> <op: AndOrBinaryOp> <op2: AddSubExprTag> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

AndOrExprTag: Expr = {
  Spanned<_AndOrBinaryExprTag> => Expr::binary(<>),
  AddSubExprTag,
}

_AddSubBinaryExprTag: _BinaryExpr = {
  <op1: AddSubExprTag> <op: AddSubBinaryOp> <op2: MulDivModExprTag> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

AddSubExprTag: Expr = {
  Spanned<_AddSubBinaryExprTag> => Expr::binary(<>),
  MulDivModExprTag,
}

_MulDivModBinaryExprTag: _BinaryExpr = {
  <op1: MulDivModExprTag> <op: MulDivModBinaryOp> <op2: UnaryExprTag> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

MulDivModExprTag: Expr = {
  Spanned<_MulDivModBinaryExprTag> => Expr::binary(<>),
  UnaryExprTag,
}

_UnaryExprTag: _UnaryExpr = {
  <op: UnaryOp> <op1: UnitExprTag> => _UnaryExpr::new(op, op1),
  // <op1: UnitExpr> <op: TypeCastOp> => _UnaryExpr::new(op, op1),
}

UnaryExprTag: Expr = {
  Spanned<_UnaryExprTag> => Expr::unary(<>),
  UnitExprTag,
}

ComplexExprTag: Expr = {
  Spanned<_AndOrBinaryExprTag> => Expr::binary(<>),
  Spanned<_AddSubBinaryExprTag> => Expr::binary(<>),
  Spanned<_MulDivModBinaryExprTag> => Expr::binary(<>),
  Spanned<_UnaryExprTag> => Expr::unary(<>),
}

UnitExprTag: Expr = {
  Constant => Expr::constant(<>),
  Identifier => Expr::variable(Variable::new(<>)),
  "(" <t: ComplexExprTag> ")" => t,
}

/// ======================================== ///
/// ========= Relation Declaration ========= ///
/// ======================================== ///

DefineSymbol = { ":-", "=" }

RelationKeyword = {
  "rel",
  "relation",
}

RelationDecl: RelationDecl = {
  ConstantSetDecl => RelationDecl::Set(<>),
  FactDecl => RelationDecl::Fact(<>),
  RuleDecl => RelationDecl::Rule(<>),
  ReduceRuleDecl => RelationDecl::ReduceRule(<>),
}

Constant: Constant = {
  IntLiteral => Constant::Integer(<>),
  FloatLiteral => Constant::Float(<>),
  BoolLiteral => Constant::Boolean(<>),
  CharLiteral => Constant::Char(<>),
  StringLiteral => Constant::String(<>),
  SymbolLiteral => Constant::Symbol(<>),
  DateTimeLiteral => Constant::DateTime(<>),
  DurationLiteral => Constant::Duration(<>),
}

ConstantOrVariable: ConstantOrVariable = {
  Constant => ConstantOrVariable::Constant(<>),
  Variable => ConstantOrVariable::Variable(<>),
}

ConstantTuple = Spanned<_ConstantTuple>;
_ConstantTuple: _ConstantTuple = {
  "(" <elems: Separated<ConstantOrVariable, ",">> ")" => _ConstantTuple::new(elems),
  ConstantOrVariable => _ConstantTuple::new(vec![<>]),
}

ConstantSetTuple = Spanned<_ConstantSetTuple>;
_ConstantSetTuple: _ConstantSetTuple = {
  <tag: Constant> "::" <tuple: ConstantTuple> => {
    _ConstantSetTuple::new(Some(tag), tuple)
  },
  <tuple: ConstantTuple> => {
    _ConstantSetTuple::new(None, tuple)
  }
}

ConstantSet = Spanned<_ConstantSet>;
_ConstantSet: _ConstantSet = {
  "{" <tuples: Separated<ConstantSetTuple, ",">> "}" => _ConstantSet::new(tuples, false),
  "{" <tuples: AtLeastTwoSeparated<ConstantSetTuple, ";">> "}" => _ConstantSet::new(tuples, true),
}

ConstantSetDecl = Spanned<_ConstantSetDecl>;
_ConstantSetDecl: _ConstantSetDecl = {
  <attrs: Attributes> RelationKeyword <name: Identifier> DefineSymbol <set: ConstantSet> => {
    _ConstantSetDecl::new(attrs, name, set)
  }
}

FactDecl = Spanned<_FactDecl>;
_FactDecl: _FactDecl = {
  <attrs: Attributes> RelationKeyword <tag: Tag> "::" <a: Atom> => _FactDecl::new(attrs, Some(tag), a),
  <attrs: Attributes> RelationKeyword <a: Atom> => _FactDecl::new(attrs, None, a),
}

Wildcard = Spanned<_Wildcard>;
_Wildcard: _Wildcard = "_" => _Wildcard::new();

Variable = Spanned<_Variable>;
_Variable: _Variable = Identifier => _Variable::new(<>);

Atom = Spanned<_Atom>;
_Atom: _Atom = {
  <predicate: Identifier> "(" <args: Separated<PossiblyDestructExpr, ",">> ")" => {
    _Atom::new(predicate, vec![], args)
  },
  <n: SpecializedPredicate> "(" <args: Separated<PossiblyDestructExpr, ",">> ")" => {
    let (predicate, type_arg_ids) = n;
    let type_args = type_arg_ids.into_iter().map(Type::from).collect();
    _Atom::new(predicate, type_args, args)
  }
}

Formula = ConjDisjFormula;

ConjDisjFormula = {
  CommaConjunctionFormula,
  ImpliesFormula,
}

CommaConjunction = Spanned<_CommaConjunction>;
_CommaConjunction: _Conjunction = {
  <args: AtLeastTwoSeparatedStrict<AnnotatedAtomFormula, ",">> => _Conjunction::new(args)
}

CommaConjunctionFormula: Formula = CommaConjunction => Formula::Conjunction(<>);

ImpliesKeyword = { "=>", "implies" }

Implies = Spanned<_Implies>;
_Implies: _Implies = {
  <left: DisjunctionFormula> ImpliesKeyword <right: DisjunctionFormula> => {
    _Implies::new(left, right)
  }
}

ImpliesFormula = {
  Implies => Formula::Implies(<>),
  DisjunctionFormula,
}

DisjunctionKeyword = { "\\/", "or" }

Disjunction = Spanned<_Disjunction>;
_Disjunction: _Disjunction = {
  <args: AtLeastTwoSeparatedStrict<ConjunctionFormula, DisjunctionKeyword>> => {
    _Disjunction::new(args)
  }
}

DisjunctionFormula = {
  Disjunction => Formula::Disjunction(<>),
  ConjunctionFormula,
}

ConjunctionKeyword = { "/\\", "and" }

Conjunction = Spanned<_Conjunction>;
_Conjunction: _Conjunction = {
  <args: AtLeastTwoSeparatedStrict<AnnotatedAtomFormula, ConjunctionKeyword>> => {
    _Conjunction::new(args)
  }
}

ConjunctionFormula: Formula = {
  Conjunction => Formula::Conjunction(<>),
  AnnotatedAtomFormula,
}

NegateKeyword = { "~", "not" }

NegAtom = Spanned<_NegAtom>;
_NegAtom: _NegAtom = {
  NegateKeyword <a: Atom> => _NegAtom::new(a),
}

AnnotatedAtomFormula: Formula = {
  NegAtom => Formula::NegAtom(<>),
  UnitFormula,
}

ComplexFormula: Formula = {
  CommaConjunctionFormula,
  Implies => Formula::Implies(<>),
  Disjunction => Formula::Disjunction(<>),
  Conjunction => Formula::Conjunction(<>),
  NegAtom => Formula::NegAtom(<>),
}

VariableOrWildcard: VariableOrWildcard = {
  Variable => VariableOrWildcard::Variable(<>),
  Wildcard => VariableOrWildcard::Wildcard(<>),
}

NamedReduceParam = Spanned<_NamedReduceParam>;
_NamedReduceParam: _NamedReduceParam = {
  <i: Identifier> => _NamedReduceParam::new(i, Constant::bool_true()),
  <i: Identifier> "=" <v: Constant> => _NamedReduceParam::new(i, v),
}

ReduceParam: ReduceParam = {
  NamedReduceParam => ReduceParam::Named(<>),
  Constant => ReduceParam::Positional(<>),
}

ReduceOp = Spanned<_ReduceOp>;
_ReduceOp: _ReduceOp = {
  <l: @L> "exists" <r: @R> <has_exclamation_mark: "!"?> => {
    _ReduceOp::new(Identifier::new_with_span("exists".to_string(), l, r), vec![], has_exclamation_mark.is_some())
  },
  <l: @L> "forall" <r: @R> <has_exclamation_mark: "!"?> => {
    _ReduceOp::new(Identifier::new_with_span("forall".to_string(), l, r), vec![], has_exclamation_mark.is_some())
  },
  <n: Identifier> <has_exclamation_mark: "!"?> => {
    _ReduceOp::new(n, vec![], has_exclamation_mark.is_some())
  },
  <n: Identifier> <has_exclamation_mark: "!"?> "<" <ps: AtLeastOneSeparatedStrict<ReduceParam, ",">> ">" => {
    _ReduceOp::new(n, ps, has_exclamation_mark.is_some())
  },
  <n: SpecializedPredicate> => {
    _ReduceOp::new(n.0, n.1.into_iter().map(|id| {
      ReduceParam::Named(NamedReduceParam::new_with_loc(id.clone(), Constant::bool_true(), id.location().clone()))
    }).collect(), false)
  }
}

ReduceArgsFull: Vec<Variable> = {
  "[" <args: Separated<Variable, ",">> "]" => args,
}

ReduceArgs: Vec<Variable> = {
  <args: ReduceArgsFull?> => {
    match args {
      Some(args) => args,
      None => vec![],
    }
  }
}

ReduceLeft: Vec<VariableOrWildcard> = {
  <v: VariableOrWildcard> => vec![v],
  "(" <vs: AtLeastTwoSeparated<VariableOrWildcard, ",">> ")" => vs,
}

ReduceGroupBy: (Vec<VariableBinding>, Box<Formula>) = {
  "where" <bs: AtLeastOneSeparatedStrict<VariableBinding, ",">> ":" <f: Formula> => (bs, Box::new(f)),
}

ReduceAssignmentSymbol = { "=", ":=" }

Reduce = Spanned<_Reduce>;
_Reduce: _Reduce = {
  <vs: ReduceLeft> ReduceAssignmentSymbol <op: ReduceOp> <args: ReduceArgs> "(" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _Reduce::new(vs, op, args, vec![], f, g)
  },
  <vs: ReduceLeft> ReduceAssignmentSymbol <op: ReduceOp> <args: ReduceArgs> "(" <bs: AtLeastOneSeparatedStrict<VariableBinding, ",">> ":" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _Reduce::new(vs, op, args, bs, f, g)
  }
}

ForallExistsReduceOp = Spanned<_ForallExistsReduceOp>;
_ForallExistsReduceOp: _ReduceOp = {
  <l: @L> "exists" <r: @R> <has_exclamation_mark: "!"?> => {
    _ReduceOp::new(Identifier::new_with_span("exists".to_string(), l, r), vec![], has_exclamation_mark.is_some())
  },
  <l: @L> "forall" <r: @R> <has_exclamation_mark: "!"?> => {
    _ReduceOp::new(Identifier::new_with_span("forall".to_string(), l, r), vec![], has_exclamation_mark.is_some())
  },
}

ForallExistsReduce = Spanned<_ForallExistsReduce>;
_ForallExistsReduce: _ForallExistsReduce = {
  <negate: NegateKeyword?> <op: ForallExistsReduceOp> "(" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _ForallExistsReduce::new(negate.is_some(), op, vec![], f, g)
  },
  <negate: NegateKeyword?> <op: ForallExistsReduceOp> "(" <bs: AtLeastOneSeparatedStrict<VariableBinding, ",">> ":" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _ForallExistsReduce::new(negate.is_some(), op, bs, f, g)
  },
}

Range = Spanned<_Range>;
_Range: _Range = {
  <x: Variable> "in" <lo: UnitExpr> ".." <hi: UnitExpr> => _Range::new(x, lo, hi, false),
  <x: Variable> "in" <lo: UnitExpr> "..=" <hi: UnitExpr> => _Range::new(x, lo, hi, true),
}

UnitFormula: Formula = {
  "(" <f: ComplexFormula> ")" => f,
  Constraint => Formula::Constraint(<>),
  Atom => Formula::Atom(<>),
  Case => Formula::Case(<>),
  Reduce => Formula::Reduce(<>),
  ForallExistsReduce => Formula::ForallExistsReduce(<>),
  Range => Formula::Range(<>),
}

Constraint = Spanned<_Constraint>;
_Constraint: _Constraint = {
  Spanned<_ComparisonBinaryExpr> => _Constraint::new(Expr::Binary(<>)),
  Spanned<_UnaryExpr> => _Constraint::new(Expr::Unary(<>)),
}

Case = Spanned<_Case>;
_Case: _Case = "case" <v: Variable> "is" <e: Entity> => _Case::new(v, e);

VariableBinding = Spanned<_VariableBinding>;
_VariableBinding: _VariableBinding = {
  <name: Identifier> => _VariableBinding::new(name, None),
  "(" <name: Identifier> ":" <ty: Type> ")" => _VariableBinding::new(name, Some(ty)),
}

PossiblyDestructExpr: Expr = {
  Expr,
  <e: DestructExpr> => Expr::Destruct(e),
}

DestructExpr = Spanned<_DestructExpr>;
_DestructExpr: _DestructExpr = {
  <functor: Identifier> "(" <args: Separated<PossiblyDestructExpr, ",">> ")" => {
    _DestructExpr::new(functor, args)
  }
}

Expr: Expr = IfThenElseExpr;

IfThenElseExpr: Expr = {
  Spanned<_IfThenElseExpr> => Expr::IfThenElse(<>),
  AndOrExpr,
}
_IfThenElseExpr: _IfThenElseExpr = {
  "if" <cond: AndOrExpr> "then" <then_br: IfThenElseExpr> "else" <else_br: IfThenElseExpr> => {
    _IfThenElseExpr::new(cond, then_br, else_br)
  },
  <cond: AndOrExpr> "?" <then_br: IfThenElseExpr> ":" <else_br: IfThenElseExpr> => {
    _IfThenElseExpr::new(cond, then_br, else_br)
  }
}

AndOrBinaryOp = Spanned<_AndOrBinaryOp>;
_AndOrBinaryOp: _BinaryOp = {
  "&&" => _BinaryOp::and(),
  "||" => _BinaryOp::or(),
  "^" => _BinaryOp::xor(),
}

_AndOrBinaryExpr: _BinaryExpr = {
  <op1: AndOrExpr> <op: AndOrBinaryOp> <op2: ComparisonExpr> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

AndOrExpr: Expr = {
  Spanned<_AndOrBinaryExpr> => Expr::Binary(<>),
  ComparisonExpr,
}

ComparisonBinaryOp = Spanned<_ComparisonBinaryOp>;
_ComparisonBinaryOp: _BinaryOp = {
  "==" => _BinaryOp::eq(),
  "!=" => _BinaryOp::neq(),
  "<" => _BinaryOp::lt(),
  "<=" => _BinaryOp::leq(),
  ">" => _BinaryOp::gt(),
  ">=" => _BinaryOp::geq(),
}

_ComparisonBinaryExpr: _BinaryExpr = {
  <op1: AddSubExpr> <op: ComparisonBinaryOp> <op2: AddSubExpr> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

ComparisonExpr: Expr = {
  Spanned<_ComparisonBinaryExpr> => Expr::Binary(<>),
  AddSubExpr,
}

AddSubBinaryOp = Spanned<_AddSubBinaryOp>;
_AddSubBinaryOp: _BinaryOp = {
  "+" => _BinaryOp::add(),
  "-" => _BinaryOp::sub(),
}

AddSubExpr: Expr = {
  <a: Spanned<_AddSubBinaryExpr>> => Expr::Binary(a),
  MulDivModExpr,
}
_AddSubBinaryExpr: _BinaryExpr = {
  <op1: AddSubExpr> <op: AddSubBinaryOp> <op2: MulDivModExpr> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

MulDivModBinaryOp = Spanned<_MulDivModBinaryOp>;
_MulDivModBinaryOp: _BinaryOp = {
  "*" => _BinaryOp::mul(),
  "/" => _BinaryOp::div(),
  "%" => _BinaryOp::modulo(),
}

_MulDivModBinaryExpr: _BinaryExpr = {
  <op1: MulDivModExpr> <op: MulDivModBinaryOp> <op2: UnaryExpr> => {
    _BinaryExpr::new(op, op1, op2)
  }
}

MulDivModExpr: Expr = {
  Spanned<_MulDivModBinaryExpr> => Expr::Binary(<>),
  UnaryExpr,
}

UnaryOp = Spanned<_UnaryOp>;
_UnaryOp: _UnaryOp = {
  "+" => _UnaryOp::Pos,
  "-" => _UnaryOp::Neg,
  "!" => _UnaryOp::Not,
}

TypeCastOp = Spanned<_TypeCastOp>;
_TypeCastOp: _UnaryOp = {
  "as" <ty: Type> => _UnaryOp::TypeCast(ty),
}

UnaryExpr: Expr = {
  Spanned<_UnaryExpr> => Expr::Unary(<>),
  UnitExpr,
}
_UnaryExpr: _UnaryExpr = {
  <op: UnaryOp> <op1: UnitExpr> => _UnaryExpr::new(op, op1),
  <op1: UnitExpr> <op: TypeCastOp> => _UnaryExpr::new(op, op1),
}

ComplexExpr: Expr = {
  Spanned<_IfThenElseExpr> => Expr::IfThenElse(<>),
  Spanned<_AndOrBinaryExpr> => Expr::Binary(<>),
  Spanned<_ComparisonBinaryExpr> => Expr::Binary(<>),
  Spanned<_AddSubBinaryExpr> => Expr::Binary(<>),
  Spanned<_MulDivModBinaryExpr> => Expr::Binary(<>),
  Spanned<_UnaryExpr> => Expr::Unary(<>),
}

FunctionIdentifier = Spanned<_FunctionIdentifier>;
_FunctionIdentifier: _FunctionIdentifier = {
  <n: Identifier> => _FunctionIdentifier::new(n),
}

CallExpr = Spanned<_CallExpr>;
_CallExpr: _CallExpr = {
  "$" <f: FunctionIdentifier> "(" <args: Separated<Expr, ",">> ")" => {
    _CallExpr::new(f, args)
  }
}

NewExpr = Spanned<_NewExpr>;
_NewExpr: _NewExpr = {
  "new" <functor: Identifier> "(" <args: Separated<Expr, ",">> ")" => {
    _NewExpr::new(functor, args)
  }
}

UnitExpr: Expr = {
  "(" <e: ComplexExpr> ")" => e,
  Wildcard => Expr::Wildcard(<>),
  Constant => Expr::Constant(<>),
  Variable => Expr::Variable(<>),
  CallExpr => Expr::Call(<>),
  NewExpr => Expr::New(<>),
}

ConjunctiveRuleHead = Spanned<_ConjunctiveRuleHead>;
_ConjunctiveRuleHead: _ConjunctiveRuleHead = {
  AtLeastTwoSeparated<Atom, ConjunctionKeyword> => _ConjunctiveRuleHead::new(<>),
  "{" <a: AtLeastTwoSeparated<Atom, ",">> "}" => _ConjunctiveRuleHead::new(a),
}

DisjunctiveRuleHead = Spanned<_DisjunctiveRuleHead>;
_DisjunctiveRuleHead: _DisjunctiveRuleHead = {
  "{" <atoms: AtLeastTwoSeparated<Atom, ";">> "}" => _DisjunctiveRuleHead::new(atoms),
}

RuleHead: RuleHead = {
  Atom => RuleHead::Atom(<>),
  ConjunctiveRuleHead => RuleHead::Conjunction(<>),
  DisjunctiveRuleHead => RuleHead::Disjunction(<>),
}

pub Rule = Spanned<_Rule>;
_Rule: _Rule = {
  <head: RuleHead> DefineSymbol <body: Formula> => _Rule::new(head, body),
}

RuleDecl = Spanned<_RuleDecl>;
_RuleDecl: _RuleDecl = {
  <a: Attributes> RelationKeyword <tag: Tag> "::" <r: Rule> => {
    _RuleDecl::new(a, Some(tag), r)
  },
  <a: Attributes> RelationKeyword <r: Rule> => {
    _RuleDecl::new(a, None, r)
  },
}

ReduceRuleDecl = Spanned<_ReduceRuleDecl>;
_ReduceRuleDecl: _ReduceRuleDecl = {
  <a: Attributes> RelationKeyword <r: ReduceRule> => {
    _ReduceRuleDecl::new(a, r)
  }
}

ReduceRule = Spanned<_ReduceRule>;
_ReduceRule: _ReduceRule = {
  <rel_name: Identifier> DefineSymbol <body: PartialReduce> => {
    _ReduceRule::new(rel_name, body)
  }
}

PartialReduce = Spanned<_PartialReduce>;
_PartialReduce: _Reduce = {
  <op: ReduceOp> <args: ReduceArgs> "(" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _Reduce::new(vec![], op, args, vec![], f, g)
  },
  <op: ReduceOp> <args: ReduceArgs> "(" <bs: AtLeastOneSeparatedStrict<VariableBinding, ",">> ":" <f: Formula> <g: ReduceGroupBy?> ")" => {
    _Reduce::new(vec![], op, args, bs, f, g)
  }
}

/// ====================================== ///
/// ========= Import Declaration ========= ///
/// ====================================== ///

ImportDecl = Spanned<_ImportDecl>;
_ImportDecl: _ImportDecl = {
  <a: Attributes> "import" <f: StringLiteral> => _ImportDecl::new(a, f),
}

/// ===================================== ///
/// ========= Query Declaration ========= ///
/// ===================================== ///

pub Query: Query = {
  Identifier => Query::Predicate(<>),
  Atom => Query::Atom(<>),
}

QueryKeyword = { "query" }

QueryDecl = Spanned<_QueryDecl>;
_QueryDecl: _QueryDecl = {
  <a: Attributes> QueryKeyword <q: Query> => {
    _QueryDecl::new(a, q)
  },
}

/// ==================================== ///
/// ========= Item Declaration ========= ///
/// ==================================== ///

pub Item: Item = {
  ImportDecl => Item::ImportDecl(<>),
  TypeDecl => Item::TypeDecl(<>),
  ConstDecl => Item::ConstDecl(<>),
  RelationDecl => Item::RelationDecl(<>),
  QueryDecl => Item::QueryDecl(<>),
}

pub Items: Items = Item*;

/// ============================== ///
/// ========= Primitives ========= ///
/// ============================== ///

Name: String = name => (<>).to_string();

pub SpecializedPredicate: (Identifier, Vec<Identifier>) = {
  <start: @L> <s: specialized_name> <end: @R> => {
    // First get the name part
    let angle_id = s.find("<").unwrap(); // Split the string using `<`
    let name = s[0..angle_id].trim_end(); // The first part is the name
    let name_id = Identifier::new_with_span(name.to_string(), start, start + name.len()); // Generate the identifier for name

    // Then get the args part
    let all_args_str = &s[angle_id + 1..];
    let arg_local_start_positions = std::iter::once(0)
      .chain(all_args_str.match_indices(",").map(|(i, _)| i + 1))
      .chain(std::iter::once(all_args_str.len()))
      .collect::<Vec<_>>();
    let num_args = arg_local_start_positions.len() - 1;
    let arg_ids = (0..num_args)
      .map(|i| {
        let (curr_begin, curr_end) = (arg_local_start_positions[i], arg_local_start_positions[i + 1] - 1);
        let curr_total = curr_end - curr_begin;
        let local_arg_str = &all_args_str[curr_begin..curr_end];
        let local_arg_start = curr_begin + (curr_total - local_arg_str.trim_start().len());
        let local_arg_end = curr_begin + local_arg_str.trim_end().len();
        let global_arg_start = start + (angle_id + 1) + local_arg_start;
        let global_arg_end = start + (angle_id + 1) + local_arg_end;
        Identifier::new_with_span(local_arg_str.trim().to_string(), global_arg_start, global_arg_end)
      })
      .collect();

    // Return
    (name_id, arg_ids)
  }
}

Identifier = Spanned<_Identifier>;
_Identifier: _Identifier = <name: Name> => _Identifier::new(name);

Int: i64 = int => i64::from_str(<>).unwrap();
IntLiteral = Spanned<_IntLiteral>;
_IntLiteral: _IntLiteral = Int => _IntLiteral::new(<>);

Float: f64 = float => f64::from_str(<>).unwrap();
FloatLiteral = Spanned<_FloatLiteral>;
_FloatLiteral: _FloatLiteral = Float => _FloatLiteral::new(<>);

CharLiteral = Spanned<_CharLiteral>;
_CharLiteral: _CharLiteral = {
  <s: character> => {
    _CharLiteral::new(
      s[1..s.len() - 1]
        .replace("\\t", "\t")
        .replace("\\n", "\n")
        .replace("\\'", "'")
        .replace("\\\\", "\\")
        .into()
    )
  }
}

Bool: bool = { "true" => true, "false" => false }
BoolLiteral = Spanned<_BoolLiteral>;
_BoolLiteral: _BoolLiteral = Bool => _BoolLiteral::new(<>);

StringLiteral = Spanned<_StringLiteral>;
_StringLiteral: _StringLiteral = {
  <s: single_quote_string> => {
    _StringLiteral::new(
      s[1..s.len() - 1]
        .replace("\\t", "\t")
        .replace("\\r", "\r")
        .replace("\\n", "\n")
        .replace("\\0", "\0")
        .replace("\\\"", "\"")
        .replace("\\\'", "\'")
        .replace("\\\\", "\\")
        .into()
    )
  },
  <s: triple_quote_string> => {
    _StringLiteral::new(
      s[3..s.len() - 3]
        .replace("\\t", "\t")
        .replace("\\r", "\r")
        .replace("\\n", "\n")
        .replace("\\0", "\0")
        .replace("\\\"", "\"")
        .replace("\\\'", "\'")
        .replace("\\\\", "\\")
        .into()
    )
  }
}

SymbolLiteral = Spanned<_SymbolLiteral>;
_SymbolLiteral: _SymbolLiteral = {
  <s: symbol_string> => {
    _SymbolLiteral::new(s[2..s.len() - 1].into())
  }
}

DateTimeLiteral = Spanned<_DateTimeLiteral>;
_DateTimeLiteral: _DateTimeLiteral = {
  <s: date_time_string> => {
    _DateTimeLiteral::new(s[2..s.len() - 1].into())
  }
}

DurationLiteral = Spanned<_DurationLiteral>;
_DurationLiteral: _DurationLiteral = {
  <s: duration_string> => {
    _DurationLiteral::new(s[2..s.len() - 1].into())
  }
}

/// =========================== ///
/// ========= Helpers ========= ///
/// =========================== ///

Separated<E, S>: Vec<E> = {
  <rs: (<E> S)*> <e: E?> => rs.into_iter().chain(e.into_iter()).collect()
}

SeparatedStrict<E, S>: Vec<E> = {
  <rs: (<E> S)*> <e: E> => rs.into_iter().chain(vec![e].into_iter()).collect()
}

AtLeastOneSeparated<E, S>: Vec<E> = {
  <r1: E> => vec![r1],
  <r1: E> <rs: (S <E>)+> S? => vec![vec![r1], rs].concat(),
}

AtLeastOneSeparatedStrict<E, S>: Vec<E> = {
  <r1: E> => vec![r1],
  <r1: E> <rs: (S <E>)+> => vec![vec![r1], rs].concat(),
}

AtLeastTwoSeparated<E, S>: Vec<E> = {
  <r1: E> <rs: (S <E>)+> S? => vec![vec![r1], rs].concat(),
}

AtLeastTwoSeparatedStrict<E, S>: Vec<E> = {
  <r1: E> <rs: (S <E>)+> => vec![vec![r1], rs].concat(),
}

Spanned<T>: AstNodeWrapper<T> = {
  <start: @L> <t: T> <end: @R> => t.with_span(start, end)
}
