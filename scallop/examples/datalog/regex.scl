// =========== REGEX ===========
type Regex = Char(char) | Concat(Regex, Regex) | Union(Regex, Regex) | Star(Regex)
type regex_root(regex: Regex)

// Match a single char
rel matches_substr(expr, i, i + 1) :- case expr is Char(c), input_string(s), string_chars(s, i, c)

// Match a concatenation
rel matches_substr(expr, l, r) :- case expr is Concat(le, re), matches_substr(le, l, m), matches_substr(re, m, r)

// Match a union
rel matches_substr(expr, l, r) :- case expr is Union(a, _), matches_substr(a, l, r)
rel matches_substr(expr, l, r) :- case expr is Union(_, b), matches_substr(b, l, r)

// Match a star
rel matches_substr(expr, i, i) :- case expr is Star(_), input_string(s), string_chars(s, i, _)
rel matches_substr(expr, l, r) :- case expr is Star(c), matches_substr(c, l, r)
rel matches_substr(expr, l, r) :- case expr is Star(c), matches_substr(expr, l, m), matches_substr(c, m, r)

// Matches the whole string
rel matches() :- regex_root(e), input_string(s), matches_substr(e, 0, $string_length(s))

// =========== EXAMPLE ===========
const MY_REGEX = Concat(Concat(Concat(Char('a'), Char('b')), Char('a')), Star(Char('b')))
rel regex_root(MY_REGEX)

rel input_string("ababbbb")

query matches
