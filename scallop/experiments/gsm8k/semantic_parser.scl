type Expr = Const(f32) | Add(Expr, Expr) | Sub(Expr, Expr) | Mult(Expr, Expr) | Div(Expr, Expr)

type eval(bound e: Expr, v: f32)
rel eval(e, v) = case e is Const(v)
rel eval(e, v1 + v2) = case e is Add(e1, e2) and eval(e1, v1) and eval(e2, v2)
rel eval(e, v1 - v2) = case e is Sub(e1, e2) and eval(e1, v1) and eval(e2, v2)
rel eval(e, v1 * v2) = case e is Mult(e1, e2) and eval(e1, v1) and eval(e2, v2)
rel eval(e, v1 / v2) = case e is Div(e1, e2) and eval(e1, v1) and eval(e2, v2)

@gpt(
    prompt="""
Suppose we have the following symbolic expression language:

Expr ::= Const(float) | Add(Expr, Expr) | Sub(Expr, Expr) | Mult(Expr, Expr) | Div(Expr, Expr)

Please semantically parse the following question into a symbolic expression:

Question: {{x}}
Symbolic Program: {{y}}
""",
    examples=[
        (
            "Natalia sold clips to 48 of her friends in April, and then she sold half as many clips in May. How many clips did Natalia sell altogether in April and May?",
            "Add(Const(48), Mult(Const(0.5), Const(48)))"
        ),
        // (
        //     "Lisa, Jack, and Tommy earned $60 from washing cars all week. However, half of the $60 was earned by Lisa. Tommy earned half of what Lisa earned. How much more money did Lisa earn than Tommy?",
        //     "Sub(Mult(Const(0.5), Const(60)), Mult(Const(0.5), Mult(Const(0.5), Const(60)))"
        // ),
        // (
        //     "Arnel had ten boxes of pencils with the same number of pencils in each box.  He kept ten pencils and shared the remaining pencils equally with his five friends. If his friends got eight pencils each, how many pencils are in each box?",
        //     "Add(Const(10), Mult(Const(5), Const(8)))"
        // ),
        // (
        //     "Colton had 72 dolphin stickers. He gave 4 stickers each to 3 friends.  He also gave his friend Mandy 2 more than he gave his three friends total.   And he gave Justin 10 less than Mandy.  How many stickers does Colton have left?",
        //     "Sub(Sub(Sub(Const(72), Mult(Const(4), Const(3))), Add(Const(2), Mult(Const(4), Const(3)))), Sub(Add(Const(2), Mult(Const(4), Const(3))), Const(10)))"
        // ),
    ],
    model="gpt-4",
    debug=true,
) 
type semantic_parser(bound x: String, y: Entity)

type question(ctx: String)

rel parsed_expr(s) = question(q) and semantic_parser(q, s)
rel result(v) = parsed_expr(e) and eval(e, v)

query result