// This file contains syntax for demonstration of VSCode plugin
// The file itself does not compile

// Import item
import "file.scl"

// Alias type definition
type MyType = AliasType // This is an inline comment

// Subtype definition
type SubType <: SuperType

// Enum type definition; variables are separated by `|`
type EnumType = VAR_A | VAR_B | VAR_C

// Enum type definition with assigned number
type EnumType2 = VAR_A = 0 | VAR_B = 3 | VAR_C

// Algebraic data type definition
type AlgebraicDataType = Number(i32) | OtherVariant(MyType, String)

// ADT definition with new lines
type Expr = Number(i32)
          | Var(String)
          | Add(Expr, Expr)

// Relation type definition; arguments are named
type relation(arg1: Type1, arg2: Type2)

// Relation type definition; arguments are not named
type relation2(i32, i32, String)

// Attribute
@demand("bf")
type fib(x: i32, y: i32)

// Adornment
type fib(bound x: i32, free y: i32)
type fib(
  bound x: i32,
  free y: i32,
)
type fib(bound i32, i32)

// Multiple attributes; attribute without argument; attribute
@hidden
@my_attr("pos_arg_1", 3, kw_arg_name=5)
@file("my_file.csv", keys=["key_1", "key_2"])
type my_table(i32, i32, i32)

// Multiple relation types
type edge(i32, i32), path(a: i32, b: i32)

// Multiple relation types with bound and free patterns
type edge(bound i32, free i32), path(bound a: i32, free b: i32)

// Function types
type $some_func(x: usize, y: usize) -> usize

// Simple constant definition
const MY_CONST = 3

// Entity definition
const MY_CONST_2 = Add(Const(3), Add(Const(5), Const(8)))

// Multiple constant definitions
const MY_CONST_3 = 1, MY_CONST_4 = Add(Const(3), Add(Const(5)))

// Multiple constant definitions
const MY_CONST_5 = 1,
      MY_CONST_6 = Add(Const(3), Add(Const(5)))

// Set of facts
rel relation = {(0, 1), (1, 2), (2, 3)}

// Set of facts with tag
rel relation = {0.01::(0, 1), 0.05::(1, 2), 0.9::(2, 3)}

// Set of facts with DateTime, Duration, and Symbol
rel relation = {d"1d2h", t"2023/01/01", s"column_name"}

// One single fact
rel 0.05::relation(0, 1)

// Multiple facts; entitys may be created inside
// Tags may be floating point or boolean or other constants
rel relation(new Const(), 1),
    0.55::relation(0, 2),
    true::relation(0, 3),
    relation(MY_CONST, 3, "135135")

// Rules
rel path(a, b) = edge(a, b) or path(a, c) and edge(c, b)
rel path(a, b) :- edge(a, b) \/ path(a, c) /\ edge(c, b)

// Rules with tag in the front
rel 0.09::path(a, b) = edge(a, b)

// Rules with arithmetics inside
rel fib(x, a + b) = fib(x - 1, a) and fib(x - 2, b)

// Rules with type conversion inside
rel to_string(x, a as String) = case x is Const(a)

// Rules with if-then-else inside
@demand("bbf")
rel max(a, b, if a > b then a else b)

// Rules with multiline
@gpt("""
This is a prompt {{x}} and {{y}}
""")
type my_query(bound x: String, free y: String)

// Rules with new entity inside
rel expr_to_string(e, $format("({} {} {})", op1_str, op_str, op2_str)) =
  case e is Binary(op, op1, op2) and
  expr_to_string(op1, op1_str) and expr_to_string(op2, op2_str) and op_to_string(op, op_str)

// Rules with aggregation inside
rel num_students(n) = n := count(a: student(a))
rel num_students = count(a: student(a))
rel num_paths(n) = n := count!(a, b: path(a, b))
rel my_rule(x) = _ := count(a, b: path(a, b) where c: color(c))
rel my_rule_2() = forall(a, b: path(a, b) and path(a, b) implies edge(a, b))
rel sample_rule(x) = (x, y) := top<3>(a, b: path(a, b))
rel sample_rule(x) = x := categorical<3>(a, b: path(a, b))
rel sample_rule(x) = x := uniform!<3>(a, b: path(a, b))
rel sample_rule(x) = (a, x) := min![a](a, b: path(a, b, v, d))
rel sample_rule(x) = (abhb, xjh, yjhhk, zkjjk, dkhbkhb) := min[a](a, b: path(a, b) where c, d, e, f, g: some_relation(3851))
rel sample_rule(x) = x := argmin![a, g, h, u, h](a, c, d, b: path(a, b))
rel sample_rule(x) = x := argmin![a, g, h, u, h](a, c, d, b: path(a, b) /* something like this */ )
rel sample_rule(x) = x := argmin!(a, c, d, b:
  path(a, b) and // new line
  edge(a, b) and // new line again
  a == b
)
rel sample_rule(x) = _ := min![x](s: score(x, s))
rel sample_rule(x) = _ := sum[p](s: score(x, s))
rel sample_rule(x) = _ := cross_entropy[i](y_pred, y: pred(i, y_pred) and ground_truth(i, y))
rel joined_string(x) = _ := string_join<3, d"asdfasdf", true, all>(s: some_string(s))
rel best_student = argmax(s: score(p, s))
rel best_student = argmax[p](s: score(p, s))
rel top_ranked = top<3>(s: score(p, s))

// Nested aggregation
rel nested_agg(x) = x := count(x: m := max(x: relation(x)))

// Disjunctive datalog
rel { assign(x, true); assign(x, false) } = var(x, y, z, a, b, c, d, e, f, g, h, i, j, a + 1)

// Relations with generic arguments
rel grid(x, y) = range<i32>(0, 5, x) and range<i32>(0, 5, y)

// Rules with range operator
rel grid(x, y) = x in 0..5 and y in 0..x + 1

// Query a relation
query relation

// Query using an atom
query my_relation(a, a + b, $hash(1, 3, 5))
